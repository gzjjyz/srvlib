// Code generated by protoc-gen-go. DO NOT EDIT.
// source: health.proto

package health

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_b4ad4d88024fc31a, []int{0}
}
func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReq.Unmarshal(m, b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
}
func (dst *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(dst, src)
}
func (m *PingReq) XXX_Size() int {
	return xxx_messageInfo_PingReq.Size(m)
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

type PingResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResp) Reset()         { *m = PingResp{} }
func (m *PingResp) String() string { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()    {}
func (*PingResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_b4ad4d88024fc31a, []int{1}
}
func (m *PingResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResp.Unmarshal(m, b)
}
func (m *PingResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResp.Marshal(b, m, deterministic)
}
func (dst *PingResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResp.Merge(dst, src)
}
func (m *PingResp) XXX_Size() int {
	return xxx_messageInfo_PingResp.Size(m)
}
func (m *PingResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResp.DiscardUnknown(m)
}

var xxx_messageInfo_PingResp proto.InternalMessageInfo

type NodeHealthDesc struct {
	SkippedCheck         bool     `protobuf:"varint,1,opt,name=skippedCheck,proto3" json:"skippedCheck,omitempty"`
	FailedCnt            uint32   `protobuf:"varint,2,opt,name=failedCnt,proto3" json:"failedCnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeHealthDesc) Reset()         { *m = NodeHealthDesc{} }
func (m *NodeHealthDesc) String() string { return proto.CompactTextString(m) }
func (*NodeHealthDesc) ProtoMessage()    {}
func (*NodeHealthDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_b4ad4d88024fc31a, []int{2}
}
func (m *NodeHealthDesc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHealthDesc.Unmarshal(m, b)
}
func (m *NodeHealthDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHealthDesc.Marshal(b, m, deterministic)
}
func (dst *NodeHealthDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHealthDesc.Merge(dst, src)
}
func (m *NodeHealthDesc) XXX_Size() int {
	return xxx_messageInfo_NodeHealthDesc.Size(m)
}
func (m *NodeHealthDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHealthDesc.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHealthDesc proto.InternalMessageInfo

func (m *NodeHealthDesc) GetSkippedCheck() bool {
	if m != nil {
		return m.SkippedCheck
	}
	return false
}

func (m *NodeHealthDesc) GetFailedCnt() uint32 {
	if m != nil {
		return m.FailedCnt
	}
	return 0
}

func init() {
	proto.RegisterType((*PingReq)(nil), "PingReq")
	proto.RegisterType((*PingResp)(nil), "PingResp")
	proto.RegisterType((*NodeHealthDesc)(nil), "NodeHealthDesc")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthClient is the client API for Health service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type healthClient struct {
	cc *grpc.ClientConn
}

func NewHealthClient(cc *grpc.ClientConn) HealthClient {
	return &healthClient{cc}
}

func (c *healthClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/Health/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServer is the server API for Health service.
type HealthServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
}

func RegisterHealthServer(s *grpc.Server, srv HealthServer) {
	s.RegisterService(&_Health_serviceDesc, srv)
}

func _Health_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Health/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Health_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Health",
	HandlerType: (*HealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Health_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "health.proto",
}

func init() { proto.RegisterFile("health.proto", fileDescriptor_health_b4ad4d88024fc31a) }

var fileDescriptor_health_b4ad4d88024fc31a = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xe2, 0xe4, 0x62, 0x0f, 0xc8, 0xcc, 0x4b,
	0x0f, 0x4a, 0x2d, 0x54, 0xe2, 0xe2, 0xe2, 0x80, 0x30, 0x8b, 0x0b, 0x94, 0x82, 0xb8, 0xf8, 0xfc,
	0xf2, 0x53, 0x52, 0x3d, 0xc0, 0x4a, 0x5d, 0x52, 0x8b, 0x93, 0x85, 0x94, 0xb8, 0x78, 0x8a, 0xb3,
	0x33, 0x0b, 0x0a, 0x52, 0x53, 0x9c, 0x33, 0x52, 0x93, 0xb3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38,
	0x82, 0x50, 0xc4, 0x84, 0x64, 0xb8, 0x38, 0xd3, 0x12, 0x33, 0x73, 0x52, 0x53, 0x9c, 0xf3, 0x4a,
	0x24, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83, 0x10, 0x02, 0x46, 0xaa, 0x5c, 0x6c, 0x10, 0xf3, 0x84,
	0xa4, 0xb9, 0x58, 0x40, 0x36, 0x09, 0x71, 0xe8, 0x41, 0xed, 0x96, 0xe2, 0xd4, 0x83, 0x59, 0xed,
	0xc4, 0x11, 0xc5, 0x06, 0x71, 0x61, 0x12, 0x1b, 0xd8, 0x89, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0a, 0x82, 0x79, 0x02, 0xb2, 0x00, 0x00, 0x00,
}
